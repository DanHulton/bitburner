import { targets } from "/scripts/lib/targets.ns";

/**
 * Get a random server as a target.
 * 
 * @param {NetScript} ns - The Netscript environment.
 * @param {Array<string>} servers - The servers to choose a target from.  Modified.
 *
 * @return {string}
 */
function getTarget(ns, servers) {
	var idx = Math.floor(Math.random() * servers.length);
	var target = { name: servers.splice(idx, 1) };
	
	ns.print("\n### New target: " + target.name);
	
	return target;
}

/**
 * Check if the process being examined is weaken, grow, or hack.
 * 
 * @param {Object} process - The process to examine.
 * 
 * @return {Boolean}
 */
function isWorking(process) {
	return process.filename == "/scripts/node/hack.script"
		|| process.filename == "/scripts/node/weaken.script"
		|| process.filename == "/scripts/node/grow.script";
}

/**
 * Wait until all grow/weaken/hack processes are complete.
 * 
 * @param {NetScript} ns - The Netscript environment.
 */
async function waitForFree(ns) {
	var processes = ns.ps();

	while (processes.some(isWorking)) {
		await ns.sleep(5000);
		processes = ns.ps();
	}
}

/**
 * Weaken the target server's security.
 *
 * @param {NetScript} ns - The Netscript environment.
 * @param {string} target - The server being weakened.
 * @param {integer} threads - The number of threads to use.
 *
 * @return {boolean}
 */
async function runWeaken(ns, target, threads) {
	target.securityLevel = ns.getServerSecurityLevel(target.name);
	target.securityThreshold = ns.getServerMinSecurityLevel(target.name) + 5;

	if (target.securityLevel > target.securityThreshold) {
		ns.print("Security level (" + ns.nFormat(target.securityLevel, "0,0.0") + ") higher than threshold (" + target.securityThreshold + ").");
		ns.print("üê≠ Weakening with " + threads + " threads...");
		ns.run("/scripts/node/weaken.script", threads, target.name);

		return true;
	}

	return false;
}

/**
 * Grow the target server's money.
 *
 * @param {NetScript} ns - The Netscript environment.
 * @param {string} target - The server being grown.
 * @param {integer} threads - The number of threads to use.
 *
 * @return {boolean}
 */
async function runGrow(ns, target, threads) {
	target.moneyAvailable = ns.getServerMoneyAvailable(target.name);
	target.moneyThreshold = ns.getServerMaxMoney(target.name) * 0.75;

	if (target.moneyAvailable < target.moneyThreshold) {
		ns.print("Money available (" + ns.nFormat(target.moneyAvailable, "$0.0a") + ") lower than threshold (" + ns.nFormat(target.moneyThreshold, "$0.0a") + ").");
		ns.print("üå± Growing with " + threads + " threads...");
		ns.run("/scripts/node/grow.script", threads, target.name);

		return true;
	}

	return false;
}

/**
 * Aim to hack 20% of outstanding money so that if four servers attack the same target, it's not completely wiped out.
 *
 * @param {NetScript} ns - The Netscript environment.
 * @param {string} target - The server being hacked.
 * @param {integer} maxHackThreads - The maximum number of threads to use.
 *
 * @return {boolean}
 */
async function runHack(ns, target, maxHackThreads) {
	var threads = Math.min(maxHackThreads, Math.floor(ns.hackAnalyzeThreads(target.name, target.moneyAvailable * 0.2)));
	var hackMoney = ns.hackAnalyzePercent(target.name) / 100 * target.moneyAvailable * threads;

	ns.print("ü§ë Hacking " + ns.nFormat(hackMoney, "$0.0a") + " with " + threads + " threads...");
	ns.run("/scripts/node/hack.script", threads, target.name);
}

/**
 * Chooses a task and runs it.
 * 
 * @param {NetScript} ns - The Netscript environment.
 * @param {Array<string>} servers - The collection of servers to pick a target from.  Modified.
 * @param {string} hostName - The name of the current host being run on.
 */
async function runTask(ns, servers, hostName) {
	var target = getTarget(ns, servers);
	var freeRam = ns.getServerMaxRam(hostName) - ns.getServerUsedRam(hostName);
	var maxWeakenThreads = Math.floor(freeRam / 1.75);
	var maxGrowThreads = Math.floor(freeRam / 1.75);
	var maxHackThreads = Math.floor(freeRam / 1.7);

	ns.print("Server free RAM: " + freeRam + "GB");

	if (await runWeaken(ns, target, maxWeakenThreads)) {
		// no-op
	}
	else if (await runGrow(ns, target, maxGrowThreads)) {
		// no-op
	}
	else {
		await runHack(ns, target, maxHackThreads);
	}
}

/**
 *	Main.
 * 
 * @param {NetScript} ns - The Netscript environment.
 */
export async function main(ns) {
	var hostName = ns.getHostname();

	while (true) {
		var copy = [].concat(targets);

		while (copy.length) {
			await waitForFree(ns);
			await runTask(ns, copy, hostName);
		}
	}
}